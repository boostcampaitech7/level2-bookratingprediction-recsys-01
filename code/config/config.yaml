# config.yaml
# 직접 하이퍼파라미터를 추가하여 관리할 수 있습니다.

memo: |-
    남겨둘 메모가 있다면 여기에.
    여러 줄로도 작성 가능
    wandb 사용 시 wandb의 description으로 사용됩니다.


# 아래의 일곱 항목들은 argparser로 받은 인자를 우선적으로 사용합니다.
#   $ python main.py --config config.yaml --seed 2024
#   과 같이 실행할 경우 seed는 0이 아닌 2024로 설정됩니다.
predict: False  # 예측할 경우 True로 설정
checkpoint: 'saved/checkpoints/FM_best.pt'   # 예측 시 불러올 모델 경로
seed: 0         # 시드 고정
device: cuda    # 가능한 값 : cpu, cuda, mps
model: NCF      # 모델 선택
ML: True        # ML 모델(catboost) 사용 여부  
wandb: True                            # wandb 사용 여부
wandb_project: 'lv2.bookratingprediction' # wandb 프로젝트 이름
run_name: 'jay : context, image NCF'

model_args:     # model에 해당하는 파라미터만 실질적으로 사용됩니다.
    NCF:
        datatype: context_image
        embed_dim: 32               # sparse 벡터를 임베딩할 차원
        mlp_dims: [32, 64]          # MLP_Base의 히든 레이어 차원
        batchnorm: True             # MLP_Base에서 배치 정규화 사용 여부
        dropout: 0.                 # MLP_Base에서 드롭아웃 비율
        img_size: 28
        channel_list: [8,16,32]
        kernel_size: 3
        stride: 2
        padding: 1
        cnn_dropout: 0.5
    CVAE:
        datatype : all
        loss : MSE_KLDLoss
        latent_dim : 32
        hidden_dim : 64
        embed_dim: 16
        img_size: 64                # 이미지 전처리를 통해 조정할 이미지 크기 (64 -> 3x64x64)
        kernel_size: 3              # CNN_Base에서 사용할 각 레이어의 커널 사이즈
        channel_list: [8, 16, 32]   # CNN_Base에서 사용할 각 레이어의 채널 수
        stride: 2                   # CNN_Base에서 사용할 각 레이어의 스트라이드
        padding: 1                  # CNN_Base에서 사용할 각 레이어의 패딩
        cnn_batchnorm: True         # CNN_Base에서 배치 정규화 사용 여부
        cnn_dropout: 0.2            # CNN_Base에서 드롭아웃 비율
        batchnorm: True             # MLP_Base에서 배치 정규화 사용 여부
        dropout: 0.2
        word_dim: 768
        pretrained_model: 'bert-base-uncased'
        vector_create: False
    NFM: 
        datatype: context           # context, context_image, text, all 중 context 가능
        embed_dim: 16               # sparse 벡터를 임베딩할 차원
    NFFM:
        datatype: context           # context, context_image, text, all 중 context 가능
        embed_dim: 16               # sparse 벡터를 임베딩할 차원
    DeepFFM:
        datatype: context           # context, context_image, text, all 중 context 가능
        embed_dim: 16               # sparse 벡터를 임베딩할 차원
        mlp_dims: [16, 32]          # MLP_Base의 히든 레이어 차원
        batchnorm: True             # MLP_Base에서 배치 정규화 사용 여부
        dropout: 0.2                # MLP_Base에서 드롭아웃 비율s
    DCNwithFFM:
        datatype: context           # context, context_image, text, all 중 context 가능
        dcn_embed_dim: 16           # dcn 임베딩할 차원
        ffm_embed_dim: 16           # ffm 임베딩할 차원
        cross_layer_num: 3          # cross network layer 수
        mlp_dims: [16, 32]          # mlp layer 차원 list
        batchnorm: True 
        dropout: 0.2
    CatBoost:                       # context, context_image, text, all 중 context 가능
        datatype: text    
        vector_create: False    
        embed_dim: 16               # summary vector embedding 차원
        pretrained_model: 'bert-base-uncased'   # 텍스트 임베딩에 사용할 사전학습 모델
        word_dim: 768               # embedding word 차원 수
        embed_module: 'Linear'      # embedding 방법
        params: {'iterations': 62, 'loss_function':'RMSE', 
                'task_type':'GPU', 'depth': 10, 'learning_rate': 0.09561643045825612, 
                'l2_leaf_reg': 6.433777066156716}




dataset:
    data_path: ./data/    # 데이터셋 경로
    valid_ratio: 0.2    # Train / Vaildation split

dataloader:
    batch_size: 512    # 배치 사이즈
    shuffle: True       # 학습 데이터 셔플 여부
    num_workers: 0      # 멀티프로세서 수. 0: 메인프로세서만 사용

optimizer:
    type: Adam      # 사용가능한 optimizer: torch.optim.Optimizer 클래스 (https://pytorch.org/docs/stable/optim.html#algorithms)
    args:           # 사용하고자 하는 클래스의 파라미터를 참고하여 추가해주시면 되며, 관계가 없는 파라미터는 무시됩니다.
        lr: 0.01            # 예) 모든 옵티마이저에서 사용되는 학습률
        weight_decay: 1e-3  # 예) Adam 등 / L2 정규화 가중치
        amsgrad: False      # 예) Adam 등 / amsgrad 사용 여부

loss: RMSELoss          # 직접 정의한 loss 클래스 또는 torch.nn.Module 클래스 (https://pytorch.org/docs/stable/nn.html#loss-functions)

lr_scheduler:
    use: False                  # True: 사용 / False: 사용하지 않음 (단, valid_ratio가 0일 경우 validation set이 없어 사용 불가)
    type: ReduceLROnPlateau     # 사용가능한 lr_scheduler: torch.optim.lr_scheduler 클래스 (https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate)
    args:                       # 사용하고자 하는 클래스의 파라미터를 참고하여 추가해주시면 되며, 관계가 없는 파라미터는 무시됩니다.
        mode: 'min'             # 예) ReduceLROnPlateau / 'min' 또는 'max'
        factor: 0.1             # 예) ReduceLROnPlateau / 학습률 감소 비율
        step_size: 10           # 예) StepLR / 학습률 감소 주기 (필수)
        gamma: 0.1              # 예) StepLR 등 / 학습률 감소 비율

metrics: [ MSELoss, MAELoss, RMSELoss ]  # 평가 지표. 직접 정의한 loss 클래스 또는 torch.nn.Module 클래스 (https://pytorch.org/docs/stable/nn.html#loss-functions)

train:
    epochs: 20                          # 학습 에폭 수
    log_dir: saved/log                  # 로그 저장 경로
    ckpt_dir: saved/checkpoint    # 모델 저장 경로
    submit_dir: saved/submit            # 예측 저장 경로
    save_best_model: True               # True: val_loss가 최소인 모델 저장 / False: 모든 모델 저장
    resume: False                               # 이어서 학습할 경우 True
    resume_path: saved/checkpoint/FM_best.pt    # 이어서 학습할 모델 경로

